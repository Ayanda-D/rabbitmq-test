NOTES
-----

Tests incorporated into this directory can be executed using the
either the supplied ./Makefile or the top-level one (../Makefile).

By default the logging levels are very quiet. To turn these up, you
may set one of the following variables when executing make:

1. REBAR_LOG - compile verbosity: takes a number from 0 (default) to 4
2. SYSTEST_VERBOSE=1 - prints various framework notifications to stdout
3. SYSTEST_LOGGING=1 - prints additional test code logging to stdout

SysTest version incompatibilities
---------------------------------

The version of SysTest we install is dictated by the SYSTEST_VERSION
variable in the Makefile. This version needs to be reflected in the
rebar configuration file (./systest.config) and will be checked
during the 'test-compile' make target against the version number we
find in the ./test-lib/systest/ebin/systest.app file. If you have
hg pull'ed to a revision wherein the make variable has changed *and*
you've already got a set of systest artefacts in ./test-lib, then it
will be necessary to execute `make clean` in order to remove them
before proceeding.

Adding new test suites
----------------------

Reading https://github.com/nebularis/systest/wiki/quickstart is probably
a good idea before diving in to write new test cases.

Test suites should be added to the ./test directory and must adhere
to the common_test OTP framework guidelines. In addition to this,
some configuration is required in order for systest to pick up
your suite(s):

You may provide a valid systest profile. This consists of a set of
targets (i.e., the names of the suite modules you wish to run when
executing this profile) and wildcard(s) used to locate 'resources',
which are the configuration files systest uses to bootstrap your
rabbit cluster/nodes before running tests.

The default resource(s) already provide some common configurations
that can be re-used. The ./resources/rabbit-nodes.config file
provides two 'test process stereotypes' that can be used when
configuring your rabbit test cluster:

1. rabbit_node - executes rabbitmq-server with a clean environment
2. connected - creates an AMQP connection+channel for the duration
    of your test (case, group or suite) and tears it down after.

The 'connected' configuration requires that your cluster defines
'user_data' for each node, specifying the AMQP port on which the
broker should listen. See ./resources/simple_ha_cluster.config for
an example of how to set this up.

If you wish to simply re-use an existing cluster configuration for
all the tests in your suite, you can do so by setting up a resource
configuration entry like so:

    {my_test_SUITE, [{all, cluster_config_key}]}.

Running tests via the Makefile
------------------------------------------

The systest executable, which is automatically installed if your
target depends on $(SYSTEST), will run the profile indicated with
the -P command line argument if SYSTEST_PROFILE is provided. If you
wish to run a specific profile, you should invoke make using the
'test-profile' target, otherwise the 'test-all' target ignores the
profile and runs all tests in all suite modules using all the
available configuration files.

To run an individual test suite or test case, the makefile provides
a 'test-run' target. You must still provide a SYSTEST_PROFILE and the
test suite (or test case) is supplied via SYSTEST_TARGET. Test cases
are specified as `<suite>:<case>` so to run the 'rapid_redeclare' test
case alone, you would invoke make like so:

    $ make test-run \
          SYSTEST_PROFILE=simple-tests \
          SYSTEST_TARGET="simple_ha_cluster_SUITE:rapid_redeclare"

If during development you find that some test resources are not behaving
properly (e.g., failing to initialise, restart, or stop, etc) then you
can start up an erlang shell with systest running and a specific resource
bootstrapped into the current shell. Even if the resource startup is
failing, this will enable you to inspect the resource and its configuration
in the shell.

To start the resource used for the 'rapid_redeclare' test case, we first
look at the profile to find out which resources are being loaded:

    {resource,  ["resources/rabbit_nodes.resource",
                 "resources/simple_ha_cluster.resource"]}.
    {targets,  [simple_ha_cluster_SUITE]}.

The resource(s) chosen for our specific test case are chosen from the
simple_ha_cluster.resource file:

    {simple_ha_cluster_SUITE, [{all, three_node_cluster}]}.

In this case, all test case functions in the simple_ha_cluster_SUITE are
bound to the 'three_node_cluster' resource, so that is what we set the
target to:

    $ make test-shell \
          SYSTEST_PROFILE=simple-tests \
          SYSTEST_TARGET=three_node_cluster

After an initial delay whilst the cluster is started and the relevant hooks
executed, we're dropping into a shell session from which we can access the
current resource like so:

     -------------------------
          SysTest Profile     
     -------------------------

     name                     : simple-tests
     framework                : systest_ct
     source                   : /home/t4/work/vmware/....
     output_dir               : /tmp/systest
     log_dir                  : /tmp/systest/logs
     resources                : ["resources/rabbit_nodes.resource",
                                 "resources/simple_ha_cluster.resource"]
     targets                  : [simple_ha_cluster_SUITE]

     Erlang R15B01 (erts-5.9.1) [source] [64-bit] [smp:4:4] ....
     
     Eshell V5.9.1  (abort with ^G)
     (systest_runner@frigg)1> ThreeNodeCluster = systest:get_system_under_test().
     <0.214.0>
     (systest_runner@frigg)2> Nodes = systest:list_processes(ThreeNodeCluster).
     [{a@frigg,<0.215.0>},
      {b@frigg,<0.224.0>},
      {c@frigg,<0.233.0>}]
     (systest_runner@frigg)3> systest:stop(ThreeNodeCluster).
     ok

Customising Global Time Traps
-----------------------------

SysTest allows time traps to be configured at almost any level of
granularity. The topmost of these is the `execution_timetrap` which
sets an upper bound on the time the emulator is allowed to continue
running. Unless the execution of the entire selected profile completes
within this time frame, the emulator will be stopped and an error message
printed out.

Time traps can also be set at the profile level, and applied to all test
resources at once. There are three flavours of these:

1. setup_timetrap - triggered if a resource (e.g., SUT) takes too long to start
2. teardown_timetrap - the corollary to setup, handling stopping/teardown instead
3. aggressive_teardown - a mechanism to kill unresponsive resources

The aggressive_teardown option, if set to a timeout value (e.g., {minutes, N}
or some such) will brutally kill the controlling process for the test resource
unless it terminates within the given time period. If set to `true` the timeout
will default to 20 seconds. If set to `false` - the default setting - then no
action will be taken.

Customising Test Properties
---------------------------

Some of the test code uses values which are supplied via configuration
in the ./resources/default.settings file. If you wish to add new
common settings, you should put them in here and retrieve them in your
code using `systest:settings(SettingsKey)` or the systest_config
API (see https://github.com/nebularis/systest/wiki/configuration for
more details).

If on the other hand, you wish to override the default settings, then
doing so in a file named after the current user (i.e., the user who
is invoking systest) will allow you to override a sub-set of the
default values, and these changes will only be applied when the
executable is invoked by that user. So for example, I can override
the default time trap for the kill-multi test case and increase the
message throughput at the same time, but overriding these settings
for my user id:

    %% in file ./resources/tim.settings
    {message_volumes, [
        {kill_multi, 10000}
    ]}.

    {time_traps, [
        {kill_multi, {minutes, 2}}
    ]}.

Note that the other configuration elements in default are unaffected
by this and will continue to work as expected.

A note about code coverage
--------------------------

When enabled, code coverage will be started and stopped for each remote
node, dealing with node restarts and shut-down instructions issued via
the systest API calls transparently. It has been noticed however, that
in some environments code coverage can cause test cases with large
numbers of nodes (i.e., the kill_multi tests in multi_node_deaths_SUITE)
to fail. For this reason, the Makefile in rabbitmq-test currently
disables coverage for this profile/suite, and you can do the same if
required by passing SYSTEST_NO_COVER=1 to make.

A note about rebar
------------------

We are using rebar to obtain dependencies and compile our test code.
It should be noted that we're currently using the tip of a remote
branch (named systest) from https://github.com/hyperthunk/rebar and
that this is pulled in by systest itself.

We are also using the 'test-compile' command, which was recently
deprecated from rebar in favour of `eunit compile_only=true` or
equivalent commands. This will be addressed in a future version of
systest, at which point we'll need to make the appropriate changes
to our makefile so that we're using whatever API is supported by
the version of rebar that systest brings in.

An alternative approach would be to explicitly fork rebar for rabbitmq
internal use in general.

